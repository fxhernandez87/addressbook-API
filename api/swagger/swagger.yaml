---
  swagger: "2.0"
  info: 
    version: "0.0.4"
    title: "STRV Addressbook Api"
    description: "This is a sample address book API.  Here you will be able to register yourself or login via email and password, and receive a JWT token which you can use in the secured endpoints like [Contacts](#/Contacts)."
    contact: 
      email: "fxhernandez87@gmail.com"
  host: "localhost:3010"
  basePath: "/api"
  schemes: 
    - "http"
  tags: 
    - 
      name: "Users"
      description: "Users operations"
    - 
      name: "Contacts"
      description: "Contacts operations"
  consumes: 
    - "application/json"
  produces: 
    - "application/json"
  paths: 
    /users/signup: 
      x-swagger-router-controller: "features/users/controllers/users"
      post: 
        description: ">Using **email** and **password** authentication, it will validate if the email is already taken, if the password isn't too short. \nFinally will respond with a token in the **Authorization** response headers"
        summary: "Register a user to manage cantacts"
        consumes: 
          - "application/json"
        operationId: "registerUser"
        tags: 
          - "Users"
        parameters: 
          - 
            name: "user"
            in: "body"
            description: "User to be registered"
            required: true
            schema: 
              required: 
                - "email"
                - "password"
              properties: 
                email: 
                  type: "string"
                password: 
                  type: "string"
                name: 
                  type: "string"
        responses: 
          201: 
            description: "Created"
            schema: 
              required: 
                - "data"
              properties: 
                data: 
                  $ref: "#/definitions/User"
          400: 
            description: "Bad request"
            schema: 
              $ref: "#/definitions/Error"
    /users/login: 
      x-swagger-router-controller: "features/users/controllers/users"
      post: 
        operationId: "loginUser"
        tags: 
          - "Users"
        description: ">Using **email** and **password** authentication, it will validate if the email exists, if the password match the one in the database.\nFinally will respond with a token in the **Authorization** response headers"
        summary: "Get the token of the logged in user"
        parameters: 
          - 
            name: "user"
            in: "body"
            description: "User to be logged in"
            required: true
            schema: 
              required: 
                - "email"
                - "password"
              properties: 
                email: 
                  type: "string"
                password: 
                  type: "string"
        responses: 
          200: 
            description: "Success"
            schema: 
              required: 
                - "data"
              properties: 
                data: 
                  $ref: "#/definitions/User"
          400: 
            description: "Bad request"
            schema: 
              $ref: "#/definitions/Error"
          401: 
            description: "Unauthorized"
            schema: 
              $ref: "#/definitions/Error"
          404: 
            description: "Item not found"
            schema: 
              $ref: "#/definitions/Error"
    /contacts: 
      x-swagger-router-controller: "features/users/controllers/contacts"
      post: 
        security: 
          - 
            jwtAuth: []
        description: ">Adding a new contact requires you to be logged in, set an Authorization header with a valid token (not expired).\nNew contacts will be added on a firebase database (firestore) in a collection \"**contacts**\" with the fields passed on the body and additionally the userId that is creating that contact. This way  on the client side can retrieve all the contacts using the userId key."
        summary: "add a new contact for the logged in user"
        consumes: 
          - "application/json"
        operationId: "addContact"
        tags: 
          - "Contacts"
        parameters: 
          - 
            name: "contact"
            in: "body"
            description: "Contact to be added"
            required: true
            schema: 
              required: 
                - "email"
                - "surName"
                - "name"
              properties: 
                email: 
                  type: "string"
                surName: 
                  type: "string"
                name: 
                  type: "string"
        responses: 
          200: 
            description: "Success"
            schema: 
              required: 
                - "data"
              properties: 
                data: 
                  $ref: "#/definitions/Contact"
          400: 
            description: "Bad request"
            schema: 
              $ref: "#/definitions/Error"
          401: 
            description: "Unauthorized"
            schema: 
              $ref: "#/definitions/Error"
          403: 
            description: "Forbidden"
            schema: 
              $ref: "#/definitions/Error"
    /swagger: 
      x-swagger-pipe: "swagger_raw"
  definitions: 
    Error: 
      properties: 
        statusCode: 
          type: "number"
        message: 
          type: "string"
        error: 
          type: "string"
        code: 
          type: "string"
      required: 
        - "statusCode"
        - "message"
        - "error"
    User: 
      properties: 
        _id: 
          type: "string"
        email: 
          type: "string"
        name: 
          type: "string"
    Contact: 
      properties: 
        _id: 
          type: "string"
        email: 
          type: "string"
        surName: 
          type: "string"
        name: 
          type: "string"
  securityDefinitions: 
    jwtAuth: 
      type: "apiKey"
      name: "Authorization"
      in: "header"
      description: "Bearer token authentication"
